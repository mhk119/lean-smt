/- import Smt.Reconstruction.Certifying -/

open Classical
open Smt.Reconstruction.Certifying



set_option maxRecDepth 10000
set_option maxHeartbeats 500000

variable {a : Int}
variable {b : Prop}
variable {c : Int}
variable {a : Int}
variable {b : Prop}
variable {c : Int}

theorem th0 : (Eq (Eq (binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0)))) (Int.ofNat 0)) (Eq c (ite b c (Int.ofNat 0)))) → (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) → (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) (ite b c (Int.ofNat 0))) (Rat.ofInt (ite b c (Int.ofNat 0)))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) c) (Rat.ofInt (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) c))) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Int.ofNat 1))) (Neg.neg (Rat.ofInt 1))) → (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Int.ofNat 1)) (Neg.neg (Rat.ofInt 1))) → (Eq (binrel% LE.le (Rat.ofInt 0) (Neg.neg (Rat.ofInt 2))) False) → (Eq (binrel% HAdd.hAdd (ite b c (Int.ofNat 0)) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0)))) (Int.ofNat 0)) → (Eq (ite (Not (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0))))) (Int.ofNat 1) (Int.ofNat 0)) (ite (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0)))) (Int.ofNat 0) (Int.ofNat 1))) → (Eq (binrel% LT.lt (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)) (Not (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)))) → (Eq (binrel% HMul.hMul (Int.ofNat 1) (ite b c (Int.ofNat 0))) (ite b c (Int.ofNat 0))) → (Eq (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0)))) (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1)))) → (Eq (Not (Not (binrel% GE.ge c (Int.ofNat 1)))) (binrel% GE.ge c (Int.ofNat 1))) → (Eq (binrel% GT.gt (Int.ofNat 1) (Int.ofNat 0)) True) → (Eq (binrel% LE.le (Int.ofNat 0) (Neg.neg (Int.ofNat 1))) False) → (Eq (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 1)) (Neg.neg (Int.ofNat 1))) → (Eq (Not (Not (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)))) (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) → (Eq (binrel% HMul.hMul (Int.ofNat 1) (Neg.neg (Int.ofNat 1))) (Neg.neg (Int.ofNat 1))) → (Eq (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1)))) (Neg.neg (Rat.ofInt 2))) → (Eq (binrel% GE.ge (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (Int.ofNat 0)) (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Int.ofNat 0)) (Rat.ofInt 0)) → (Eq (Not True) False) → (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (binrel% HMul.hMul (Int.ofNat 1) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 1)) (binrel% HMul.hMul (Int.ofNat 1) (Int.ofNat 1)))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (binrel% HMul.hMul (Int.ofNat 1) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 1)) (binrel% HMul.hMul (Int.ofNat 1) (Int.ofNat 1)))))) → (Eq (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) → (Eq (Eq (ite b c (Int.ofNat 0)) c) (Eq c (ite b c (Int.ofNat 0)))) → (Eq (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) → (Eq (binrel% LT.lt (Int.ofNat 0) c) (Not (binrel% GE.ge (Int.ofNat 0) c))) → (Eq (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) True) → (Eq (binrel% HAdd.hAdd (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Neg.neg (Int.ofNat 1))) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) → (Eq (binrel% LT.lt (Neg.neg (Int.ofNat 1)) (Int.ofNat 0)) True) → (Eq (binrel% GE.ge (Int.ofNat 0) c) (Not (binrel% GE.ge c (Int.ofNat 1)))) → (Eq (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0))))) (Rat.ofInt (binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0)))))) → (Eq (binrel% HMul.hMul (Int.ofNat 1) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) → (Eq (binrel% LT.lt a (Int.ofNat 0)) (Not (binrel% GE.ge a (Int.ofNat 0)))) → (Eq (Eq (ite b c (Int.ofNat 0)) (ite b c (Int.ofNat 0))) (Eq (ite b c (Int.ofNat 0)) (ite b c (Int.ofNat 0)))) → (Eq (binrel% GE.ge (Int.ofNat 0) (Int.ofNat 0)) True) → (Eq (binrel% HAdd.hAdd (Rat.ofInt (binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0))))) (binrel% HAdd.hAdd (Rat.ofInt (ite b c (Int.ofNat 0))) (Rat.ofInt (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) c)))) (Rat.ofInt 0)) → (Eq (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (Int.ofNat 1)) (Int.ofNat 0)) → (Eq (binrel% HMul.hMul (Int.ofNat 1) (Int.ofNat 1)) (Int.ofNat 1)) → (Eq (binrel% HSub.hSub (ite (Not (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0))))) (Int.ofNat 1) (Int.ofNat 0)) (Int.ofNat 1)) (binrel% HAdd.hAdd (ite (Not (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0))))) (Int.ofNat 1) (Int.ofNat 0)) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 1)))) → (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (Int.ofNat 0)) → (Eq (Eq (ite b c (Int.ofNat 0)) (ite b c (Int.ofNat 0))) True) → (Eq (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 0)) (Int.ofNat 0)) → (binrel% LT.lt a (Int.ofNat 0)) → (binrel% LT.lt (Int.ofNat 0) c) → (Eq a (binrel% HSub.hSub (ite (Not (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0))))) (Int.ofNat 1) (Int.ofNat 0)) (Int.ofNat 1))) → False :=
fun lean_r0 : (Eq (Eq (binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0)))) (Int.ofNat 0)) (Eq c (ite b c (Int.ofNat 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r1 : (Eq (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r2 : (Eq (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r3 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (ite b c (Int.ofNat 0))) (Rat.ofInt (ite b c (Int.ofNat 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r4 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) c) (Rat.ofInt (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) c))) => -- THEORY_REWRITE_ARITH
fun lean_r5 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Int.ofNat 1))) (Neg.neg (Rat.ofInt 1))) => -- THEORY_REWRITE_ARITH
fun lean_r6 : (Eq (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Int.ofNat 1)) (Neg.neg (Rat.ofInt 1))) => -- THEORY_REWRITE_ARITH
fun lean_r7 : (Eq (binrel% LE.le (Rat.ofInt 0) (Neg.neg (Rat.ofInt 2))) False) => -- THEORY_REWRITE_ARITH
fun lean_r8 : (Eq (binrel% HAdd.hAdd (ite b c (Int.ofNat 0)) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0)))) (Int.ofNat 0)) => -- THEORY_REWRITE_ARITH
fun lean_r9 : (Eq (ite (Not (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0))))) (Int.ofNat 1) (Int.ofNat 0)) (ite (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0)))) (Int.ofNat 0) (Int.ofNat 1))) => -- THEORY_REWRITE_BOOL
fun lean_r10 : (Eq (binrel% LT.lt (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)) (Not (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r11 : (Eq (binrel% HMul.hMul (Int.ofNat 1) (ite b c (Int.ofNat 0))) (ite b c (Int.ofNat 0))) => -- THEORY_REWRITE_ARITH
fun lean_r12 : (Eq (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0)))) (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r13 : (Eq (Not (Not (binrel% GE.ge c (Int.ofNat 1)))) (binrel% GE.ge c (Int.ofNat 1))) => -- THEORY_REWRITE_BOOL
fun lean_r14 : (Eq (binrel% GT.gt (Int.ofNat 1) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r15 : (Eq (binrel% LE.le (Int.ofNat 0) (Neg.neg (Int.ofNat 1))) False) => -- THEORY_REWRITE_ARITH
fun lean_r16 : (Eq (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 1)) (Neg.neg (Int.ofNat 1))) => -- THEORY_REWRITE_ARITH
fun lean_r17 : (Eq (Not (Not (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)))) (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) => -- THEORY_REWRITE_BOOL
fun lean_r18 : (Eq (binrel% HMul.hMul (Int.ofNat 1) (Neg.neg (Int.ofNat 1))) (Neg.neg (Int.ofNat 1))) => -- THEORY_REWRITE_ARITH
fun lean_r19 : (Eq (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1)))) (Neg.neg (Rat.ofInt 2))) => -- THEORY_REWRITE_ARITH
fun lean_r20 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (Int.ofNat 0)) (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) => -- THEORY_REWRITE_ARITH
fun lean_r21 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (Int.ofNat 0)) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r22 : (Eq (Not True) False) => -- THEORY_REWRITE_BOOL
fun lean_r23 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (binrel% HMul.hMul (Int.ofNat 1) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 1)) (binrel% HMul.hMul (Int.ofNat 1) (Int.ofNat 1)))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (binrel% HMul.hMul (Int.ofNat 1) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 1)) (binrel% HMul.hMul (Int.ofNat 1) (Int.ofNat 1)))))) => -- THEORY_REWRITE_ARITH
fun lean_r24 : (Eq (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) => -- THEORY_REWRITE_ARITH
fun lean_r25 : (Eq (Eq (ite b c (Int.ofNat 0)) c) (Eq c (ite b c (Int.ofNat 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r26 : (Eq (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r27 : (Eq (binrel% LT.lt (Int.ofNat 0) c) (Not (binrel% GE.ge (Int.ofNat 0) c))) => -- THEORY_REWRITE_ARITH
fun lean_r28 : (Eq (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) True) => -- THEORY_REWRITE_ARITH
fun lean_r29 : (Eq (binrel% HAdd.hAdd (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Neg.neg (Int.ofNat 1))) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r30 : (Eq (binrel% LT.lt (Neg.neg (Int.ofNat 1)) (Int.ofNat 0)) True) => -- EVALUATE
fun lean_r31 : (Eq (binrel% GE.ge (Int.ofNat 0) c) (Not (binrel% GE.ge c (Int.ofNat 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r32 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0))))) (Rat.ofInt (binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0)))))) => -- THEORY_REWRITE_ARITH
fun lean_r33 : (Eq (binrel% HMul.hMul (Int.ofNat 1) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) => -- THEORY_REWRITE_ARITH
fun lean_r34 : (Eq (binrel% LT.lt a (Int.ofNat 0)) (Not (binrel% GE.ge a (Int.ofNat 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r35 : (Eq (Eq (ite b c (Int.ofNat 0)) (ite b c (Int.ofNat 0))) (Eq (ite b c (Int.ofNat 0)) (ite b c (Int.ofNat 0)))) => -- THEORY_REWRITE_ARITH
fun lean_r36 : (Eq (binrel% GE.ge (Int.ofNat 0) (Int.ofNat 0)) True) => -- THEORY_REWRITE_ARITH
fun lean_r37 : (Eq (binrel% HAdd.hAdd (Rat.ofInt (binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0))))) (binrel% HAdd.hAdd (Rat.ofInt (ite b c (Int.ofNat 0))) (Rat.ofInt (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) c)))) (Rat.ofInt 0)) => -- THEORY_REWRITE_ARITH
fun lean_r38 : (Eq (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (Int.ofNat 1)) (Int.ofNat 0)) => -- THEORY_REWRITE_ARITH
fun lean_r39 : (Eq (binrel% HMul.hMul (Int.ofNat 1) (Int.ofNat 1)) (Int.ofNat 1)) => -- THEORY_REWRITE_ARITH
fun lean_r40 : (Eq (binrel% HSub.hSub (ite (Not (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0))))) (Int.ofNat 1) (Int.ofNat 0)) (Int.ofNat 1)) (binrel% HAdd.hAdd (ite (Not (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0))))) (Int.ofNat 1) (Int.ofNat 0)) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 1)))) => -- THEORY_REWRITE_ARITH
fun lean_r41 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (Int.ofNat 0)) => -- THEORY_REWRITE_ARITH
fun lean_r42 : (Eq (Eq (ite b c (Int.ofNat 0)) (ite b c (Int.ofNat 0))) True) => -- THEORY_REWRITE_ARITH
fun lean_r43 : (Eq (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 0)) (Int.ofNat 0)) => -- THEORY_REWRITE_ARITH
fun lean_a44 : (binrel% LT.lt a (Int.ofNat 0)) =>
fun lean_a45 : (binrel% LT.lt (Int.ofNat 0) c) =>
fun lean_a46 : (Eq a (binrel% HSub.hSub (ite (Not (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0))))) (Int.ofNat 1) (Int.ofNat 0)) (Int.ofNat 1))) => by
have lean_s0 : (Or (Not (binrel% GE.ge c (Int.ofNat 1))) (Or (Not (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1)))) (Or (Not (Eq c (ite b c (Int.ofNat 0)))) False))) :=
  (scope (fun lean_a47 : (binrel% GE.ge c (Int.ofNat 1)) =>
    (scope (fun lean_a48 : (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) =>
      (scope (fun lean_a49 : (Eq c (ite b c (Int.ofNat 0))) =>
        have lean_s0 : (Eq (Eq c (ite b c (Int.ofNat 0))) (Eq (binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0)))) (Int.ofNat 0))) := Eq.symm lean_r0
        have lean_s1 : (Eq (binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0)))) (Int.ofNat 0)) := eqResolve lean_a49 lean_s0
        have lean_s2 : (Or (Not (Eq (binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0)))) (Int.ofNat 0))) False) :=
          (scope (fun lean_a50 : (Eq (binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0)))) (Int.ofNat 0)) =>
            have lean_s2 : (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) := trueElim lean_r1
            have lean_s3 : (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (Eq (binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0)))) (Int.ofNat 0))) := And.intro lean_s2 lean_a50
            have lean_s4 : (Implies (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (Eq (binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0)))) (Int.ofNat 0))) (Eq (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0))))) (binrel% HMul.hMul (Rat.ofInt 1) (Int.ofNat 0)))) := by arithMulPos [(binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0)))), (Int.ofNat 0), (Rat.ofInt 1)], 4
            have lean_s5 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0))))) (binrel% HMul.hMul (Rat.ofInt 1) (Int.ofNat 0))) := modusPonens lean_s3 lean_s4
            have lean_s6 : (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1)))) := And.intro lean_s2 lean_a48
            have lean_s7 : (Implies (And (binrel% GT.gt (Rat.ofInt 1) (Int.ofNat 0)) (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1)))) (Eq (binrel% HMul.hMul (Rat.ofInt 1) (ite b c (Int.ofNat 0))) (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Int.ofNat 1))))) := by arithMulPos [(ite b c (Int.ofNat 0)), (Neg.neg (Int.ofNat 1)), (Rat.ofInt 1)], 4
            have lean_s8 : (Eq (binrel% HMul.hMul (Rat.ofInt 1) (ite b c (Int.ofNat 0))) (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Int.ofNat 1)))) := modusPonens lean_s6 lean_s7
            have lean_s9 : (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) := trueElim lean_r2
            have lean_s10 : (Eq (Not (binrel% GE.ge (Int.ofNat 0) c)) (Not (Not (binrel% GE.ge c (Int.ofNat 1))))) := flipCongrArg lean_r31 [Not]
            have lean_s11 : (Eq (Not (binrel% GE.ge (Int.ofNat 0) c)) (binrel% GE.ge c (Int.ofNat 1))) := Eq.trans lean_s10 lean_r13
            have lean_s12 : (Eq (binrel% LT.lt (Int.ofNat 0) c) (binrel% GE.ge c (Int.ofNat 1))) := Eq.trans lean_r27 lean_s11
            have lean_s13 : (binrel% GE.ge c (Int.ofNat 1)) := eqResolve lean_a45 lean_s12
            have lean_s14 : (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GE.ge c (Int.ofNat 1))) := And.intro lean_s9 lean_s13
            have lean_s15 : (Implies (And (binrel% LT.lt (Neg.neg (Rat.ofInt 1)) (Int.ofNat 0)) (binrel% GE.ge c (Int.ofNat 1))) (binrel% LE.le (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) c) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Int.ofNat 1)))) := by arithMulNeg [c, (Int.ofNat 1), (Neg.neg (Rat.ofInt 1))], 3
            have lean_s16 : (binrel% LE.le (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) c) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Int.ofNat 1))) := modusPonens lean_s14 lean_s15
            have lean_s17 : (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0))))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (ite b c (Int.ofNat 0))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) c))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Int.ofNat 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Int.ofNat 1))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Int.ofNat 1))))) := by sumBounds [lean_s5, lean_s8, lean_s16]
            let lean_s18 := congrHAdd lean_r3 lean_r4
            have lean_s19 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0))))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (ite b c (Int.ofNat 0))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) c))) (binrel% HAdd.hAdd (Rat.ofInt (binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0))))) (binrel% HAdd.hAdd (Rat.ofInt (ite b c (Int.ofNat 0))) (Rat.ofInt (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) c))))) := congrHAdd lean_r32 lean_s18
            have lean_s20 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0))))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (ite b c (Int.ofNat 0))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) c))) (Rat.ofInt 0)) := Eq.trans lean_s19 lean_r37
            let lean_s21 := flipCongrArg lean_s20 [LE.le]
            let lean_s22 := congrHAdd lean_r5 lean_r6
            have lean_s23 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Int.ofNat 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Int.ofNat 1))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Int.ofNat 1)))) (binrel% HAdd.hAdd (Rat.ofInt 0) (binrel% HAdd.hAdd (Neg.neg (Rat.ofInt 1)) (Neg.neg (Rat.ofInt 1))))) := congrHAdd lean_r21 lean_s22
            have lean_s24 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Int.ofNat 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Int.ofNat 1))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Int.ofNat 1)))) (Neg.neg (Rat.ofInt 2))) := Eq.trans lean_s23 lean_r19
            have lean_s25 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0))))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (ite b c (Int.ofNat 0))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) c))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Int.ofNat 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Int.ofNat 1))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Int.ofNat 1))))) (binrel% LE.le (Rat.ofInt 0) (Neg.neg (Rat.ofInt 2)))) := congr lean_s21 lean_s24
            have lean_s26 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0))))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (ite b c (Int.ofNat 0))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) c))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Int.ofNat 0)) (binrel% HAdd.hAdd (binrel% HMul.hMul (Rat.ofInt 1) (Neg.neg (Int.ofNat 1))) (binrel% HMul.hMul (Neg.neg (Rat.ofInt 1)) (Int.ofNat 1))))) False) := Eq.trans lean_s25 lean_r7
            show False from eqResolve lean_s17 lean_s26
          ))
        have lean_s3 : (Not (Eq (binrel% HAdd.hAdd c (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0)))) (Int.ofNat 0))) := by liftOrNToNeg lean_s2
        show False from contradiction lean_s1 lean_s3
  ))))))
have lean_s1 : (Not (And (binrel% GE.ge c (Int.ofNat 1)) (And (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Eq c (ite b c (Int.ofNat 0)))))) := by liftOrNToNeg lean_s0
have lean_s2 : (Or (Not (binrel% GE.ge c (Int.ofNat 1))) (Or (Not (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1)))) (Not (Eq c (ite b c (Int.ofNat 0)))))) := flipNotAnd lean_s1 [(binrel% GE.ge c (Int.ofNat 1)), (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))), (Eq c (ite b c (Int.ofNat 0)))]
have lean_s3 : (ite b (Eq (ite b c (Int.ofNat 0)) c) (Eq (ite b c (Int.ofNat 0)) (Int.ofNat 0))) := sorry --  iteIntro
have lean_s4 : (Eq b b) := rfl
have lean_s5 : (Eq (ite b c (Int.ofNat 0)) (ite b c (Int.ofNat 0))) := rfl
let lean_s6 := flipCongrArg lean_s5 [Eq]
have lean_s7 : (Eq (ite b c (Int.ofNat 0)) (ite b c (Int.ofNat 0))) := rfl
have lean_s8 : (Eq (Eq (ite b c (Int.ofNat 0)) (ite b c (Int.ofNat 0))) (Eq (ite b c (Int.ofNat 0)) (ite b c (Int.ofNat 0)))) := congr lean_s6 lean_s7
let lean_s9 := Eq.trans lean_r35 lean_s8
have lean_s10 : (Eq (Eq (ite b c (Int.ofNat 0)) (ite b c (Int.ofNat 0))) True) := Eq.trans lean_s9 lean_r42
have lean_s11 : (Eq (ite b c (Int.ofNat 0)) (ite b c (Int.ofNat 0))) := trueElim lean_s10
let lean_s12 := flipCongrArg lean_s11 [Eq]
have lean_s13 : (Eq c c) := rfl
have lean_s14 : (Eq (Eq (ite b c (Int.ofNat 0)) c) (Eq (ite b c (Int.ofNat 0)) c)) := congr lean_s12 lean_s13
let lean_s15 := flipCongrArg lean_s11 [Eq]
have lean_s16 : (Eq (Int.ofNat 0) (Int.ofNat 0)) := rfl
have lean_s17 : (Eq (Eq (ite b c (Int.ofNat 0)) (Int.ofNat 0)) (Eq (ite b c (Int.ofNat 0)) (Int.ofNat 0))) := congr lean_s15 lean_s16
have lean_s18 : (Eq (ite b (Eq (ite b c (Int.ofNat 0)) c) (Eq (ite b c (Int.ofNat 0)) (Int.ofNat 0))) (ite b (Eq (ite b c (Int.ofNat 0)) c) (Eq (ite b c (Int.ofNat 0)) (Int.ofNat 0)))) := sorry -- congrIte lean_s4 lean_s14 lean_s17
have lean_s19 : (ite b (Eq (ite b c (Int.ofNat 0)) c) (Eq (ite b c (Int.ofNat 0)) (Int.ofNat 0))) := eqResolve lean_s3 lean_s18
have lean_s20 : (Eq b b) := rfl
have lean_s21 : (Eq (Eq (ite b c (Int.ofNat 0)) (Int.ofNat 0)) (Eq (ite b c (Int.ofNat 0)) (Int.ofNat 0))) := rfl
have lean_s22 : (Eq (ite b (Eq (ite b c (Int.ofNat 0)) c) (Eq (ite b c (Int.ofNat 0)) (Int.ofNat 0))) (ite b (Eq c (ite b c (Int.ofNat 0))) (Eq (ite b c (Int.ofNat 0)) (Int.ofNat 0)))) := sorry -- congrIte lean_s20 lean_r25 lean_s21
have lean_s23 : (ite b (Eq c (ite b c (Int.ofNat 0))) (Eq (ite b c (Int.ofNat 0)) (Int.ofNat 0))) := eqResolve lean_s19 lean_s22
have lean_s24 : (Or (Not b) (Eq c (ite b c (Int.ofNat 0)))) :=  sorry -- iteElim1 lean_s23
have lean_s25 : (Or (Eq c (ite b c (Int.ofNat 0))) (Not b)) := by permutateOr lean_s24, [1, 0], (- 1)
have lean_s26 : (Or b (Eq (ite b c (Int.ofNat 0)) (Int.ofNat 0))) := sorry -- iteElim2 lean_s23
have lean_s27 : (Or (Not (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1)))) (Or (Not (Eq (ite b c (Int.ofNat 0)) (Int.ofNat 0))) False)) :=
  (scope (fun lean_a51 : (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) =>
    (scope (fun lean_a52 : (Eq (ite b c (Int.ofNat 0)) (Int.ofNat 0)) =>
      have lean_s27 : (binrel% GT.gt (Int.ofNat 1) (Int.ofNat 0)) := trueElim lean_r14
      have lean_s28 : (And (binrel% GT.gt (Int.ofNat 1) (Int.ofNat 0)) (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1)))) := And.intro lean_s27 lean_a51
      have lean_s29 : (Implies (And (binrel% GT.gt (Int.ofNat 1) (Int.ofNat 0)) (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1)))) (Eq (binrel% HMul.hMul (Int.ofNat 1) (ite b c (Int.ofNat 0))) (binrel% HMul.hMul (Int.ofNat 1) (Neg.neg (Int.ofNat 1))))) := by arithMulPos [(ite b c (Int.ofNat 0)), (Neg.neg (Int.ofNat 1)), (Int.ofNat 1)], 4
      have lean_s30 : (Eq (binrel% HMul.hMul (Int.ofNat 1) (ite b c (Int.ofNat 0))) (binrel% HMul.hMul (Int.ofNat 1) (Neg.neg (Int.ofNat 1)))) := modusPonens lean_s28 lean_s29
      have lean_s31 : (binrel% LT.lt (Neg.neg (Int.ofNat 1)) (Int.ofNat 0)) := trueElim lean_r30
      have lean_s32 : (And (binrel% LT.lt (Neg.neg (Int.ofNat 1)) (Int.ofNat 0)) (Eq (ite b c (Int.ofNat 0)) (Int.ofNat 0))) := And.intro lean_s31 lean_a52
      have lean_s33 : (Implies (And (binrel% LT.lt (Neg.neg (Int.ofNat 1)) (Int.ofNat 0)) (Eq (ite b c (Int.ofNat 0)) (Int.ofNat 0))) (Eq (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 0)))) := by arithMulNeg [(ite b c (Int.ofNat 0)), (Int.ofNat 0), (Neg.neg (Int.ofNat 1))], 4
      have lean_s34 : (Eq (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 0))) := modusPonens lean_s32 lean_s33
      have lean_s35 : (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 1) (ite b c (Int.ofNat 0))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 1) (Neg.neg (Int.ofNat 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 0)))) := by sumBounds [lean_s30, lean_s34]
      let lean_s36 := flipCongrArg lean_r11 [HAdd.hAdd]
      have lean_s37 : (Eq (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0)))) := rfl
      have lean_s38 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 1) (ite b c (Int.ofNat 0))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0)))) (binrel% HAdd.hAdd (ite b c (Int.ofNat 0)) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0))))) := congr lean_s36 lean_s37
      have lean_s39 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 1) (ite b c (Int.ofNat 0))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0)))) (Int.ofNat 0)) := Eq.trans lean_s38 lean_r8
      let lean_s40 := flipCongrArg lean_s39 [LE.le]
      let lean_s41 := flipCongrArg lean_r18 [HAdd.hAdd]
      have lean_s42 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 1) (Neg.neg (Int.ofNat 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 0))) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (Int.ofNat 0))) := congr lean_s41 lean_r43
      have lean_s43 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 1) (Neg.neg (Int.ofNat 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 0))) (Neg.neg (Int.ofNat 1))) := Eq.trans lean_s42 lean_r24
      have lean_s44 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 1) (ite b c (Int.ofNat 0))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 1) (Neg.neg (Int.ofNat 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 0)))) (binrel% LE.le (Int.ofNat 0) (Neg.neg (Int.ofNat 1)))) := congr lean_s40 lean_s43
      have lean_s45 : (Eq (binrel% LE.le (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 1) (ite b c (Int.ofNat 0))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite b c (Int.ofNat 0)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Int.ofNat 1) (Neg.neg (Int.ofNat 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 0)))) False) := Eq.trans lean_s44 lean_r15
      show False from eqResolve lean_s35 lean_s45
  ))))
have lean_s28 : (Not (And (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Eq (ite b c (Int.ofNat 0)) (Int.ofNat 0)))) := by liftOrNToNeg lean_s27
have lean_s29 : (Or (Not (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1)))) (Not (Eq (ite b c (Int.ofNat 0)) (Int.ofNat 0)))) := flipNotAnd lean_s28 [(Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))), (Eq (ite b c (Int.ofNat 0)) (Int.ofNat 0))]
have lean_s30 : (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 0)) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) := sorry -- iteIntro
have lean_s31 : (Eq (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1)))) := rfl
have lean_s32 : (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) := rfl
let lean_s33 := flipCongrArg lean_s32 [Eq]
have lean_s34 : (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) := rfl
have lean_s35 : (Eq (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) := congr lean_s33 lean_s34
let lean_s36 := Eq.trans lean_r26 lean_s35
have lean_s37 : (Eq (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) True) := Eq.trans lean_s36 lean_r28
have lean_s38 : (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) := trueElim lean_s37
let lean_s39 := flipCongrArg lean_s38 [Eq]
have lean_s40 : (Eq (Int.ofNat 0) (Int.ofNat 0)) := rfl
have lean_s41 : (Eq (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 0)) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 0))) := congr lean_s39 lean_s40
let lean_s42 := flipCongrArg lean_s38 [Eq]
have lean_s43 : (Eq (Int.ofNat 1) (Int.ofNat 1)) := rfl
have lean_s44 : (Eq (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) := congr lean_s42 lean_s43
have lean_s45 : (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 0)) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 0)) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)))) := sorry -- congrIte lean_s31 lean_s41 lean_s44
have lean_s46 : (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 0)) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) := eqResolve lean_s30 lean_s45
have lean_s47 : (Eq (ite b c (Int.ofNat 0)) (ite b c (Int.ofNat 0))) := trueElim lean_s10
let lean_s48 := flipCongrArg lean_s47 [Eq]
have lean_s49 : (Eq (Neg.neg (Int.ofNat 1)) (Neg.neg (Int.ofNat 1))) := rfl
have lean_s50 : (Eq (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1)))) := congr lean_s48 lean_s49
have lean_s51 : (Eq (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 0)) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 0))) := rfl
have lean_s52 : (Eq (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) := rfl
have lean_s53 : (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 0)) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 0)) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)))) := sorry -- congrIte lean_s50 lean_s51 lean_s52
have lean_s54 : (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 0)) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) := eqResolve lean_s46 lean_s53
have lean_s55 : (Or (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) := sorry -- iteElim2 lean_s54
have lean_s56 : (Or (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)) (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1)))) := by permutateOr lean_s55, [1, 0], (- 1)
have lean_s57 : (Or (Not (Not (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)))) (Or (Not (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) False)) :=
  (scope (fun lean_a52 : (Not (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) =>
    (scope (fun lean_a53 : (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)) =>
      have lean_s57 : (binrel% LT.lt (Neg.neg (Int.ofNat 1)) (Int.ofNat 0)) := trueElim lean_r30
      have lean_s58 : (And (binrel% LT.lt (Neg.neg (Int.ofNat 1)) (Int.ofNat 0)) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) := And.intro lean_s57 lean_a53
      have lean_s59 : (Implies (And (binrel% LT.lt (Neg.neg (Int.ofNat 1)) (Int.ofNat 0)) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) (Eq (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 1)))) := by arithMulNeg [(ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)), (Int.ofNat 1), (Neg.neg (Int.ofNat 1))], 4
      have lean_s60 : (Eq (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 1))) := modusPonens lean_s58 lean_s59
      have lean_s61 : (binrel% GT.gt (Int.ofNat 1) (Int.ofNat 0)) := trueElim lean_r14
      have lean_s62 : (Eq a a) := rfl
      let lean_s63 := flipCongrArg lean_s62 [Eq]
      have lean_s64 : (Eq (Int.ofNat 0) (Int.ofNat 0)) := rfl
      have lean_s65 : (Eq (Int.ofNat 1) (Int.ofNat 1)) := rfl
      have lean_s66 : (Eq (ite (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0)))) (Int.ofNat 0) (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) := sorry -- congrIte lean_r12 lean_s64 lean_s65
      have lean_s67 : (Eq (ite (Not (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0))))) (Int.ofNat 1) (Int.ofNat 0)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) := Eq.trans lean_r9 lean_s66
      let lean_s68 := flipCongrArg lean_s67 [HAdd.hAdd]
      have lean_s69 : (Eq (binrel% HAdd.hAdd (ite (Not (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0))))) (Int.ofNat 1) (Int.ofNat 0)) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 1))) (binrel% HAdd.hAdd (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Neg.neg (Int.ofNat 1)))) := congr lean_s68 lean_r16
      have lean_s70 : (Eq (binrel% HAdd.hAdd (ite (Not (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0))))) (Int.ofNat 1) (Int.ofNat 0)) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 1))) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) := Eq.trans lean_s69 lean_r29
      have lean_s71 : (Eq (binrel% HSub.hSub (ite (Not (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0))))) (Int.ofNat 1) (Int.ofNat 0)) (Int.ofNat 1)) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) := Eq.trans lean_r40 lean_s70
      have lean_s72 : (Eq (Eq a (binrel% HSub.hSub (ite (Not (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0))))) (Int.ofNat 1) (Int.ofNat 0)) (Int.ofNat 1))) (Eq a (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))))) := congr lean_s63 lean_s71
      have lean_s73 : (Eq a (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) := eqResolve lean_a46 lean_s72
      let lean_s74 := flipCongrArg lean_s73 [GE.ge]
      have lean_s75 : (Eq (Int.ofNat 0) (Int.ofNat 0)) := rfl
      have lean_s76 : (Eq (binrel% GE.ge a (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (Int.ofNat 0))) := congr lean_s74 lean_s75
      have lean_s77 : (Eq (Not (binrel% GE.ge a (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (Int.ofNat 0)))) := flipCongrArg lean_s76 [Not]
      have lean_s78 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (Int.ofNat 0))) (Not (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)))) := flipCongrArg lean_r20 [Not]
      have lean_s79 : (Eq (Not (binrel% GE.ge a (Int.ofNat 0))) (Not (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)))) := Eq.trans lean_s77 lean_s78
      let lean_s80 := Eq.trans lean_r34 lean_s79
      have lean_s81 : (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) := trueElim lean_s37
      let lean_s82 := flipCongrArg lean_s81 [GE.ge]
      have lean_s83 : (Eq (Int.ofNat 1) (Int.ofNat 1)) := rfl
      have lean_s84 : (Eq (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)) (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) := congr lean_s82 lean_s83
      have lean_s85 : (Eq (Not (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) (Not (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)))) := flipCongrArg lean_s84 [Not]
      have lean_s86 : (Eq (binrel% LT.lt a (Int.ofNat 0)) (Not (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)))) := Eq.trans lean_s80 lean_s85
      have lean_s87 : (Not (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) := eqResolve lean_a44 lean_s86
      have lean_s88 : (Eq (Not (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) (binrel% LT.lt (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) := Eq.symm lean_r10
      have lean_s89 : (binrel% LT.lt (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)) := eqResolve lean_s87 lean_s88
      have lean_s90 : (And (binrel% GT.gt (Int.ofNat 1) (Int.ofNat 0)) (binrel% LT.lt (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) := And.intro lean_s61 lean_s89
      have lean_s91 : (Implies (And (binrel% GT.gt (Int.ofNat 1) (Int.ofNat 0)) (binrel% LT.lt (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) (binrel% LT.lt (binrel% HMul.hMul (Int.ofNat 1) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (binrel% HMul.hMul (Int.ofNat 1) (Int.ofNat 1)))) := by arithMulPos [(ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)), (Int.ofNat 1), (Int.ofNat 1)], 0
      have lean_s92 : (binrel% LT.lt (binrel% HMul.hMul (Int.ofNat 1) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (binrel% HMul.hMul (Int.ofNat 1) (Int.ofNat 1))) := modusPonens lean_s90 lean_s91
      have lean_s93 : (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (binrel% HMul.hMul (Int.ofNat 1) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 1)) (binrel% HMul.hMul (Int.ofNat 1) (Int.ofNat 1)))) := by sumBounds [lean_s60, lean_s92]
      have lean_s94 : (Eq (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) := rfl
      let lean_s95 := flipCongrArg lean_s94 [HAdd.hAdd]
      have lean_s96 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (binrel% HMul.hMul (Int.ofNat 1) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) := congr lean_s95 lean_r33
      have lean_s97 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (binrel% HMul.hMul (Int.ofNat 1) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) (Int.ofNat 0)) := Eq.trans lean_s96 lean_r41
      let lean_s98 := flipCongrArg lean_s97 [GE.ge]
      let lean_s99 := flipCongrArg lean_r16 [HAdd.hAdd]
      have lean_s100 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 1)) (binrel% HMul.hMul (Int.ofNat 1) (Int.ofNat 1))) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (Int.ofNat 1))) := congr lean_s99 lean_r39
      have lean_s101 : (Eq (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 1)) (binrel% HMul.hMul (Int.ofNat 1) (Int.ofNat 1))) (Int.ofNat 0)) := Eq.trans lean_s100 lean_r38
      have lean_s102 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (binrel% HMul.hMul (Int.ofNat 1) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 1)) (binrel% HMul.hMul (Int.ofNat 1) (Int.ofNat 1)))) (binrel% GE.ge (Int.ofNat 0) (Int.ofNat 0))) := congr lean_s98 lean_s101
      have lean_s103 : (Eq (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (binrel% HMul.hMul (Int.ofNat 1) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 1)) (binrel% HMul.hMul (Int.ofNat 1) (Int.ofNat 1)))) True) := Eq.trans lean_s102 lean_r36
      have lean_s104 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (binrel% HMul.hMul (Int.ofNat 1) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 1)) (binrel% HMul.hMul (Int.ofNat 1) (Int.ofNat 1))))) (Not True)) := flipCongrArg lean_s103 [Not]
      have lean_s105 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (binrel% HMul.hMul (Int.ofNat 1) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 1)) (binrel% HMul.hMul (Int.ofNat 1) (Int.ofNat 1))))) False) := Eq.trans lean_s104 lean_r22
      have lean_s106 : (Eq (binrel% LT.lt (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (binrel% HMul.hMul (Int.ofNat 1) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) (binrel% HAdd.hAdd (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 1)) (binrel% HMul.hMul (Int.ofNat 1) (Int.ofNat 1)))) False) := Eq.trans lean_r23 lean_s105
      show False from eqResolve lean_s93 lean_s106
  ))))
have lean_s58 : (Not (And (Not (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)))) := by liftOrNToNeg lean_s57
have lean_s59 : (Or (Not (Not (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)))) (Not (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)))) := flipNotAnd lean_s58 [(Not (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))), (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))]
let lean_s60 := flipCongrArg lean_r17 [Or]
have lean_s61 : (Eq (Not (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) (Not (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)))) := rfl
have lean_s62 : (Eq (Or (Not (Not (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)))) (Not (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)))) (Or (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)) (Not (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))))) := congr lean_s60 lean_s61
have lean_s63 : (Or (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)) (Not (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)))) := eqResolve lean_s59 lean_s62
have lean_s64 : (Eq a a) := rfl
let lean_s65 := flipCongrArg lean_s64 [Eq]
have lean_s66 : (Eq (Int.ofNat 0) (Int.ofNat 0)) := rfl
have lean_s67 : (Eq (Int.ofNat 1) (Int.ofNat 1)) := rfl
have lean_s68 : (Eq (ite (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0)))) (Int.ofNat 0) (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) := sorry -- congrIte lean_r12 lean_s66 lean_s67
have lean_s69 : (Eq (ite (Not (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0))))) (Int.ofNat 1) (Int.ofNat 0)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) := Eq.trans lean_r9 lean_s68
let lean_s70 := flipCongrArg lean_s69 [HAdd.hAdd]
have lean_s71 : (Eq (binrel% HAdd.hAdd (ite (Not (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0))))) (Int.ofNat 1) (Int.ofNat 0)) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 1))) (binrel% HAdd.hAdd (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Neg.neg (Int.ofNat 1)))) := congr lean_s70 lean_r16
have lean_s72 : (Eq (binrel% HAdd.hAdd (ite (Not (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0))))) (Int.ofNat 1) (Int.ofNat 0)) (binrel% HMul.hMul (Neg.neg (Int.ofNat 1)) (Int.ofNat 1))) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) := Eq.trans lean_s71 lean_r29
have lean_s73 : (Eq (binrel% HSub.hSub (ite (Not (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0))))) (Int.ofNat 1) (Int.ofNat 0)) (Int.ofNat 1)) (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) := Eq.trans lean_r40 lean_s72
have lean_s74 : (Eq (Eq a (binrel% HSub.hSub (ite (Not (Eq (Int.ofNat 0) (binrel% HAdd.hAdd (Int.ofNat 1) (ite b c (Int.ofNat 0))))) (Int.ofNat 1) (Int.ofNat 0)) (Int.ofNat 1))) (Eq a (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))))) := congr lean_s65 lean_s73
have lean_s75 : (Eq a (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)))) := eqResolve lean_a46 lean_s74
let lean_s76 := flipCongrArg lean_s75 [GE.ge]
have lean_s77 : (Eq (Int.ofNat 0) (Int.ofNat 0)) := rfl
have lean_s78 : (Eq (binrel% GE.ge a (Int.ofNat 0)) (binrel% GE.ge (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (Int.ofNat 0))) := congr lean_s76 lean_s77
have lean_s79 : (Eq (Not (binrel% GE.ge a (Int.ofNat 0))) (Not (binrel% GE.ge (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (Int.ofNat 0)))) := flipCongrArg lean_s78 [Not]
have lean_s80 : (Eq (Not (binrel% GE.ge (binrel% HAdd.hAdd (Neg.neg (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) (Int.ofNat 0))) (Not (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)))) := flipCongrArg lean_r20 [Not]
have lean_s81 : (Eq (Not (binrel% GE.ge a (Int.ofNat 0))) (Not (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)))) := Eq.trans lean_s79 lean_s80
let lean_s82 := Eq.trans lean_r34 lean_s81
have lean_s83 : (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1))) := trueElim lean_s37
let lean_s84 := flipCongrArg lean_s83 [GE.ge]
have lean_s85 : (Eq (Int.ofNat 1) (Int.ofNat 1)) := rfl
have lean_s86 : (Eq (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)) (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) := congr lean_s84 lean_s85
have lean_s87 : (Eq (Not (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) (Not (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)))) := flipCongrArg lean_s86 [Not]
have lean_s88 : (Eq (binrel% LT.lt a (Int.ofNat 0)) (Not (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)))) := Eq.trans lean_s82 lean_s87
have lean_s89 : (Not (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) := eqResolve lean_a44 lean_s88
have lean_s90 : (Not (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1))) := by R1 lean_s63, lean_s89, (binrel% GE.ge (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)), [(- 1), 0]
have lean_s91 : (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) := by R1 lean_s56, lean_s90, (Eq (ite (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))) (Int.ofNat 0) (Int.ofNat 1)) (Int.ofNat 1)), [(- 1), 0]
have lean_s92 : (Not (Eq (ite b c (Int.ofNat 0)) (Int.ofNat 0))) := by R2 lean_s29, lean_s91, (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))), [(- 1), 0]
have lean_s93 : b := by R1 lean_s26, lean_s92, (Eq (ite b c (Int.ofNat 0)) (Int.ofNat 0)), [(- 1), 0]
have lean_s94 : (Eq c (ite b c (Int.ofNat 0))) := by R2 lean_s25, lean_s93, b, [(- 1), 0]
let lean_s95 := by R2 lean_s2, lean_s94, (Eq c (ite b c (Int.ofNat 0))), [(- 1), 0]
let lean_s96 := by R2 lean_s95, lean_s91, (Eq (ite b c (Int.ofNat 0)) (Neg.neg (Int.ofNat 1))), [(- 1), 0]
have lean_s97 : (Eq (Not (binrel% GE.ge (Int.ofNat 0) c)) (Not (Not (binrel% GE.ge c (Int.ofNat 1))))) := flipCongrArg lean_r31 [Not]
have lean_s98 : (Eq (Not (binrel% GE.ge (Int.ofNat 0) c)) (binrel% GE.ge c (Int.ofNat 1))) := Eq.trans lean_s97 lean_r13
have lean_s99 : (Eq (binrel% LT.lt (Int.ofNat 0) c) (binrel% GE.ge c (Int.ofNat 1))) := Eq.trans lean_r27 lean_s98
have lean_s100 : (binrel% GE.ge c (Int.ofNat 1)) := eqResolve lean_a45 lean_s99
exact (show False from by R2 lean_s96, lean_s100, (binrel% GE.ge c (Int.ofNat 1)), [0, 0])


