/-
Copyright (c) 2021-2023 by the authors listed in the file AUTHORS and their
institutional affiliations. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Harun Khan
-/

/-
A genral framework for lower-bounding and upper-boudning functions for
https://cvc5.github.io/docs/cvc5-1.0.2/proofs/proof_rules.html#_CPPv4N4cvc58internal6PfRule28ARITH_TRANS_EXP_APPROX_BELOWE
and some sine rules.
-/
import Mathlib.Analysis.Calculus.Taylor
import Mathlib.Data.Complex.Exponential
import Mathlib.Analysis.SpecialFunctions.ExpDeriv

open scoped Nat

open Set
#check Nat.le_induction
theorem iteratedDerivWithin_congr {ùïú : Type u} [NontriviallyNormedField ùïú] {F : Type v} [NormedAddCommGroup F] [NormedSpace ùïú F] {f : ùïú ‚Üí F} {f‚ÇÅ : ùïú ‚Üí F} {x : ùïú} {s : Set ùïú} (hs : Set.EqOn f‚ÇÅ f s) (hx : f‚ÇÅ x = f x) (hxs : UniqueDiffOn ùïú s) (hx2 : x ‚àà s) : iteratedDerivWithin n f‚ÇÅ s x = iteratedDerivWithin n f s x := by
  revert x
  induction' n with n hn
  <;> intro x hx hx2
  ¬∑ simp [hx]
  ¬∑ simp only [iteratedDerivWithin_succ (UniqueDiffOn.uniqueDiffWithinAt hxs hx2)]
    simp only [Set.EqOn] at hs
    rw [derivWithin_congr (by simp [Set.EqOn]; intro y hy; exact hn (hs hy) hy) (hn hx hx2)]


theorem deriv_comp_mul {f : Real ‚Üí Real} (hd : Differentiable Real f) :
  ‚àÄ x, deriv (fun x => f (c*x)) x = c * deriv f (c*x) := by
  intro x
  rw [show (fun x => f (c*x)) = f ‚àò (fun x => c*x) by rfl]
  rw [deriv.comp _ (Differentiable.differentiableAt hd) (by apply DifferentiableAt.const_mul (differentiableAt_id'))]
  rw [deriv_const_mul _ (differentiableAt_id'), mul_comm]
  simp


#check ENat.coe_ne_top
example (a: Nat) : a < (‚ä§ : ‚Ñï‚àû) := by
  apply Ne.lt_top (ENat.top_ne_coe a).symm

theorem iteratedDeriv_const_mul {f : ‚Ñù ‚Üí ‚Ñù } (d : Nat) (c : Real) (hf : ContDiff Real ‚ä§ f):
  ‚àÄ x, iteratedDeriv d (fun x => f (c*x)) x = c^d * (iteratedDeriv d f (c*x)) := by
  induction' d with d ih
  ¬∑ simp
  ¬∑ intro x
    rw [iteratedDeriv_succ]
    rw [congrArg deriv (funext ih)]
    rw [deriv_const_mul, deriv_comp_mul, ‚Üê iteratedDeriv_succ, pow_succ', ‚Üê mul_assoc]
    apply ContDiff.differentiable_iteratedDeriv d hf (Ne.lt_top (ENat.top_ne_coe d).symm)
    sorry


lemma taylorCoeffWithin_neg (d n : ‚Ñï) (hf : ContDiff Real ‚ä§ f):
  taylorCoeffWithin f d Set.univ x‚ÇÄ = (-1 : Real)^d * taylorCoeffWithin (fun x => f (-x)) d Set.univ (-x‚ÇÄ) := by
  simp only [taylorCoeffWithin]
  rw [‚Üê iteratedDerivWithin_congr (f := fun i => f (-i)) (f‚ÇÅ := fun i => f (-1*i)) (by simp [Set.eqOn_refl]) (by simp [Set.eqOn_refl]) uniqueDiffOn_univ (mem_univ _)]
  rw [iteratedDerivWithin_univ, iteratedDerivWithin_univ, iteratedDeriv_const_mul d _ hf]
  simp only [ mul_neg, neg_mul, one_mul, neg_neg]
  rw [mul_comm, smul_eq_mul, smul_eq_mul, mul_assoc]; congr 1
  rw [mul_comm, ‚Üê mul_assoc, ‚Üê pow_add, ‚Üê two_mul, Even.neg_one_pow (by simp), one_mul]


theorem taylorWithinEval_neg {f : Real ‚Üí Real} (hf : ContDiff Real ‚ä§ f):
  taylorWithinEval f n Set.univ x‚ÇÄ x =
  taylorWithinEval (fun x => f (-x)) n Set.univ (-x‚ÇÄ) (-x) := by
  unfold taylorWithinEval
  unfold taylorWithin
  rw [Finset.sum_congr rfl
      (by intro d _; rw [taylorCoeffWithin_neg d n hf])]
  simp
  apply Finset.sum_congr rfl
  intro d _
  simp only [PolynomialModule.eval_smul, Polynomial.eval_pow, Polynomial.eval_X]
  simp [‚Üê mul_pow, ‚Üê mul_assoc]
  apply Or.inl; ring

theorem derivWithin_eq_deriv {f : Real ‚Üí Real} (hf : ContDiff Real ‚ä§ f) (hs : UniqueDiffWithinAt Real s x):
  derivWithin f s x = deriv f x := by
  simp only [derivWithin, deriv]
  rw [fderivWithin_eq_fderiv hs (ContDiffAt.differentiableAt (ContDiff.contDiffAt hf) (by simp))]

#check ContDiffOn.differentiableOn
#check Set.EqOn.iteratedFDerivWithin
#check UniqueDiffOn.uniqueDiffWithinAt

theorem iteratedDerivWithin_eq_iteratedDeriv {f : Real ‚Üí Real} (hf : ContDiff Real ‚ä§ f) (hs : UniqueDiffOn Real s):
  ‚àÄ x ‚àà s, iteratedDerivWithin d f s x = iteratedDeriv d f x := by
  induction' d with d hd
  ¬∑ simp
  ¬∑ intro x hx
    rw [iteratedDerivWithin_succ (UniqueDiffOn.uniqueDiffWithinAt hs hx), iteratedDeriv_succ, derivWithin, deriv]
    rw [fderivWithin_congr hd (hd x hx)]
    rw [fderivWithin_eq_fderiv (UniqueDiffOn.uniqueDiffWithinAt hs hx)]
    sorry
    -- apply DifferentiableOn.differentiableAt (ContDiffOn.differentiableOn (by sorry) (by sorry))


-- This should be generalized
theorem taylorCoeffWithin_eq {f : Real ‚Üí Real} (s : Set Real) (hx : x‚ÇÄ ‚àà s) (hs : UniqueDiffOn ‚Ñù s) (hf : ContDiff Real ‚ä§ f):
  (taylorCoeffWithin f d s x‚ÇÄ) = (taylorCoeffWithin f d Set.univ x‚ÇÄ) := by
  simp only [taylorCoeffWithin]
  rw [iteratedDerivWithin_eq_iteratedDeriv hf hs _ hx, iteratedDerivWithin_univ]

-- This should be generalized
theorem taylorWithinEval_eq {f : Real ‚Üí Real} (s : Set Real) (hs : x‚ÇÄ ‚àà s) (hs1 : UniqueDiffOn ‚Ñù s) (hf : ContDiff Real ‚ä§ f) :
  (taylorWithinEval f d s x‚ÇÄ) = (taylorWithinEval f d Set.univ x‚ÇÄ) := by
  ext x
  simp only [taylorWithinEval, taylorWithin, taylorCoeffWithin_eq s hs hs1 hf]


theorem taylor_mean_remainder_lagrange‚ÇÅ {f : ‚Ñù ‚Üí ‚Ñù} {x x‚ÇÄ : ‚Ñù} {n : ‚Ñï} (hx : x < x‚ÇÄ)
  (hf : ContDiff ‚Ñù ‚ä§ f)
  (hf' : DifferentiableOn ‚Ñù (iteratedDerivWithin n f (Icc x x‚ÇÄ)) (Ioo x x‚ÇÄ)) :
  ‚àÉ (x' : ‚Ñù) (_ : x' ‚àà Ioo x‚ÇÄ x), f x - taylorWithinEval f n (Icc x x‚ÇÄ) x‚ÇÄ x =
    iteratedDerivWithin (n + 1) f (Icc x x‚ÇÄ) x' * (x - x‚ÇÄ) ^ (n + 1) / (n + 1)! := by
  have ‚ü®x' , hx', H‚ü©:= taylor_mean_remainder_lagrange (f := fun x => f (-x)) (n := n) (neg_lt_neg hx) (by sorry) (by sorry)
  use -x'
  use (show -x' ‚àà Ioo x‚ÇÄ x by sorry)
  rw [neg_neg, taylorWithinEval_eq _ sorry] at H
  rw [taylorWithinEval_neg, ‚ÜêtaylorWithinEval_eq (Icc x x‚ÇÄ)] at H
  simp only [neg_neg, sub_neg_eq_add] at H
  rw [H, iteratedDerivWithin_eq_iteratedDeriv, iteratedDerivWithin_eq_iteratedDeriv]
  rw [show (fun x => f (-x)) = (fun x => f (-1 * x)) by simp]
  rw [iteratedDeriv_const_mul _ _ hf, mul_rotate, mul_assoc, ‚Üê mul_pow, add_comm (-x) x‚ÇÄ]
  simp [sub_eq_add_neg]
